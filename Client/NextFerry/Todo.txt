
What's next:
	
	Detour:  refactor client representation of Routes so that it agrees with server, so that server
	can be the master of routes.   Then back to the ongoing changes.
	
	
	We've got a performance problem: drawing the main display can take as much as 0.5 second.
		Investigation reveals this is an organic problem, simply linear in the number of times displayed.
		Obvious solutions won't work for various reasons, so postponing indefinitely.

	Postponing features to V3:
		Alerts
		Travel times accomodate wait times.
		One-off schedules for holidays and other events
		
	Fix location for Pierce-west of narrows bridge.  (Server change)
	Automate tooling for retrieving schedule (low priority)	
	Add a "donate" button?	
	
	A few graphical changes are required:  the settings and the "[All]" button are still invisible to most people.
	Need to increase the size.

	Currently if the server errors out, it simply aborts and does not send a response.  For traveltimes, it should
	send an empty response so the client stops waiting for it.
	
	Consider making the alerts a paid feature?

	Sometimes Mapquest is too slow, and GAE times out the server.  Consider either having the client tell the server
	which routes it is interested in, and/or splitting the server code into front & back ends.

	Improve the experience of fetching server logs to something repeatable.

        Here's a cute little help:  if the user opens the app, and there are no routes selected,
        take them directly to the choose routes page.

What's done:
	Get it into git.
	Added expiration times.
	Added details page.
	Removed main Panorama
	Fixed caching, again
	Centralized isWeekend (but haven't implemented holidays)
	Formatting times correctly on details page (details page is *working*)
	Create preferences page to select routes.
	Add a "reset" capability to reload schedules when you think they're messed up.
	Get it on the phone.
	Storing display settings in isolated storage.
	Correct 12/24 time formatting
	Settings accessible from route page
	Refactored time functionality; this now solves the end-of-day weirdness correctly.
	Major formatting of front page in place.  It scrolls and everything.   And the departure times "light up"
	App icon
	Added one more goodness state
	Major performance improvement for route page
	Added ability to set wait time.
	Added holidays
	Fixed threading again
	Split settings page into two, added About section
	Figure out how to package it, how to get it onto marketplace?

	Version 2.0
	Remove schedulefetcher and replace with call to our service.
	Update parser for format changes and add more robust error checking
	Add logic to overwrite our cache only when the read from the server is good.
	Add application and cache version numbers.
	Add exception handling (this was a *bug* in V1.0 --- had try/finally w/o catch!)

	Version 2.0 rev 2
	Switched to Google App Engine after being unable to do logging usefully.
	System is now working with deployed service http://nextferry.appspot.com/
	Improvements to visibility on main page
	Added first implementation of travel distance on server (client not yet using).
	Location awareness on the client is in!   
	Unfortunately the emulator doesn't seem to help us debug it, so we'll actually have to drive around and see...
	Added "no network" popup.
	Made vashon-* names direction specific
	Added upgrade capability (check what the last version of the app to run is).
	Added "easter egg" debug capability.
	Added help page.

	Create a public repository, just for grins (maybe someone else will add features?)

	Version 2.x
	Solved duplicate message problem (we were creating multiple backgroundworkers)

